require('dotenv').config();
const express = require('express');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json()); // Habilita JSON no body das requisiÃ§Ãµes

// Supabase client
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// Rota de teste: GET todas as mensagens
app.get('/', async (req, res) => {
  const { data, error } = await supabase.from('messages').select('*');
  if (error) return res.status(500).json({ erro: error.message });
  res.json(data);
});

// Rota de histÃ³rico por nÃºmero (GET)
app.get('/responder/:numero', async (req, res) => {
  const numero = '+' + req.params.numero;

  const { data, error } = await supabase
    .from('messages')
    .select('content, created_at')
    .eq('number', numero)
    .order('created_at', { ascending: true });

  if (error) return res.status(500).json({ erro: error.message });

  if (!data || data.length === 0) {
    return res.json({ resposta: 'Sem mensagens anteriores encontradas para esse nÃºmero.' });
  }

  const ultimaMensagem = data[data.length - 1].content;

  return res.json({
    resposta: `Recebido! Ãšltima mensagem registrada foi: "${ultimaMensagem}"`
  });
});

// ðŸ”¥ NOVA ROTA POST /responder â€“ recebe dados do Make, processa e responde
app.post('/responder', async (req, res) => {
  const { numero, nome, empresa, mensagem, contexto } = req.body;

  // ValidaÃ§Ã£o bÃ¡sica
  if (!numero || !mensagem) {
    return res.status(400).json({ erro: 'NÃºmero e mensagem sÃ£o obrigatÃ³rios.' });
  }

  // Aqui vocÃª pode adicionar lÃ³gica de IA / GPT futuramente
  const respostaGerada = `OlÃ¡, ${nome || 'cliente'} da ${empresa || 'empresa'}! Recebemos: "${mensagem}"`;

  // Resposta
  return res.json({ resposta: respostaGerada });
});

// Inicia o servidor
app.listen(port, () => {
  console.log(`âœ… AVA rodando na porta ${port}`);
});
